package edu.carroll.EatAndShare.backEnd.model;

import jakarta.persistence.*;
import org.springframework.core.SpringVersion;
import java.util.List;

/**
 * Represents a recipe created by a user in the EatAndShare application.
 *
 * <p>This entity is mapped to the "recipe" table in the database and
 * stores key details about each recipe, including title, preparation
 * time, cooking time, difficulty, and associated image reference. Each recipe
 * belongs to a specific user and category, and contains a list of
 * recipe ingredients.</p>
 *
 * <p>Relationships:</p>
 * <ul>
 *   <li>{@link User} - Many-to-One: Each recipe is created by a single user.</li>
 *   <li>{@link Category} - Many-to-One: Each recipe belongs to one category (e.g., dessert, appetizer).</li>
 *   <li>{@link RecipeIngredient} - One-to-Many: Each recipe can have multiple ingredients with quantities and units.</li>
 * </ul>
 *
 * <p>This class also includes helper methods for managing recipe
 * details and linked entities.</p>
 *
 * @author Andrias
 * @version 1.0
 * @since 2025-10-11
 */
@Entity
@Table(name = "recipe")
public class Recipe {

    /** Serialization identifier for the Recipe entity. */
    public static final long serialVersionUID = 1L;

    /** Primary key of the recipe table. Auto-generated by the database. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "recipe_id")
    private Integer id;

    /**
     * Many-to-one relationship with the {@link User} entity.
     * Each recipe is associated with one user (the creator).
     * The relationship uses LAZY loading to optimize performance.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    /**
     * One-to-many relationship with {@link RecipeIngredient}.
     * Represents all ingredient mappings that belong to this recipe.
     * Cascade ensures that ingredients are automatically saved or
     * deleted with the recipe. Orphan removal deletes unused mappings.
     */
    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<RecipeIngredient> recipeIngredients;

    /**
     * Many-to-one relationship with {@link Category}.
     * Links the recipe to a specific category (e.g., Breakfast, Dinner).
     * Uses LAZY loading for performance efficiency.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;

    /** Title or name of the recipe. */
    @Column(nullable = false, length = 100)
    private String title;

    /** Preparation time for the recipe (in minutes). */
    @Column(name = "prep_time_mins", length = 1000)
    private Integer prepTimeMins;

    /** Cooking time for the recipe (in minutes). */
    @Column(name = "cooking_time_mins", length = 1000)
    private Integer cookTimeMins;

    /** Difficulty level (e.g., Easy, Medium, Hard). */
    @Column
    private String difficulty;

    /** Step-by-step instructions for preparing the recipe. */
    @Column
    private String instructions;

    /** URL or file path to the recipe's image. */
    @Column(nullable = true, length = 1000)
    private String imgURL;

    /** @return the user who created the recipe */
    public User getUser() {
        return user;
    }

    /** @param user sets the user associated with this recipe */
    public void setUser(User user) {
        this.user = user;
    }

    /** @return the recipe category */
    public Category getCategory() {
        return category;
    }

    /** @param category sets the recipe category */
    public void setCategory(Category category) {
        this.category = category;
    }

    /** @return the list of recipe-ingredient relationships */
    public List<RecipeIngredient> getRecipeIngredients() {
        return recipeIngredients;
    }

    /** @param recipeIngredients sets the list of recipe-ingredient relationships */
    public void setRecipeIngredients(List<RecipeIngredient> recipeIngredients) {
        this.recipeIngredients = recipeIngredients;
    }

    /** @return the recipe title */
    public String getTitle() {
        return title;
    }

    /** @param title sets the recipe title */
    public void setTitle(String title) {
        this.title = title;
    }

    /** @return the preparation time in minutes */
    public Integer getPrepTimeMins() {
        return prepTimeMins;
    }

    /** @param prepTimeMins sets the preparation time in minutes */
    public void setPrepTimeMins(Integer prepTimeMins) {
        this.prepTimeMins = prepTimeMins;
    }

    /** @return the cooking time in minutes */
    public Integer getCookTimeMins() {
        return cookTimeMins;
    }

    /** @param cookTimeMins sets the cooking time in minutes */
    public void setCookTimeMins(Integer cookTimeMins) {
        this.cookTimeMins = cookTimeMins;
    }

    /** @return the recipe difficulty level */
    public String getDifficulty() {
        return difficulty;
    }

    /** @param difficulty sets the recipe difficulty level */
    public void setDifficulty(String difficulty) {
        this.difficulty = difficulty;
    }

    /** @return the instructions for preparing the recipe */
    public String getInstructions() {
        return instructions;
    }

    /** @param instructions sets the recipe instructions */
    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    /** @return the image URL or file path of the recipe */
    public String getImgURL() {
        return imgURL;
    }

    /** @param imgURL sets the image URL or file path of the recipe */
    public void setImgURL(String imgURL) {
        this.imgURL = imgURL;
    }

    /** @return the unique identifier (recipe ID) */
    public Integer getId() {
        return id;
    }

    /**
     * Sets the recipe ID.
     * Normally auto-generated, but can be set manually for testing or imports.
     * @param id the unique recipe ID
     */
    @Column(unique = true)
    public void setId(Integer id) {
        this.id = id;
    }

    public Recipe orElse(Object o) {
        return null;
    }
}
